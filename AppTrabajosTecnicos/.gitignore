
# Created by https://www.toptal.com/developers/gitignore/api/xamarinstudio,visualstudio,konyvisualizer,c++,java,flask,python
# Edit at https://www.toptal.com/developers/gitignore?templates=xamarinstudio,visualstudio,konyvisualizer,c++,java,flask,python

### C++ ###
# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

### Flask ###
instance/*
!instance/.gitignore
.webassets-cache

### Flask.Python Stack ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

### Java ###
# Compiled class file
*.class

# Log file

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

### KonyVisualizer ###
# Below list few files not added to gitignore list to support Headless/CI build

# Auto-generated javascript. It's important to note that jssrc at the project root
# can be ignored, but resources/customlibs/jsSrc must NOT be ignored because it stores
# FFI binding code which can only be generated during development.
/jssrc/*
!/resources/customlibs/jsSrc

# Starting with Visualizer 8.0 the Ant Contrib Jar used for the build process will
# be regenerated when the build is fired. If you're using Visualizer 7.x then comment out
# this line. Vis 7.x will not regenerate this jar and ignoring it will break your project.
ant-contrib-0.6.jar

# Binaries Ex:*.apk,*.KAR,
binaries/

# Other Visualizer auto-generated files.
/.webmeta
/.meta
middleware.properties
modules/kony_sdk.js
modules/KonySyncLib.js


# Starting with Vis 7.3 the /sdkplugin.properties file has been moved to
# `/resources/customlibs/sdkplugin.properties` and can be automatically re-created by Vis
# during the build, provided that folder `resources/customlibs` exists -consider adding a `.gitkeep`  #file to it in order to force it into source control.
resources/customlibs/sdkplugin.properties

# The jar's and zip's under these directories can be ignored so long as
# sdkplugin.properties (See above) is also ignored. The missing sdkplugin.properties will
# trigger the regeneration of these jar's and zip's during the build.
resources/customlibs/lib/android/
resources/customlibs/lib/tabrcandroid/
resources/customlibs/lib/iphone/
resources/customlibs/lib/ipad/
resources/customlibs/lib/windows10/
resources/customlibs/lib/winphone10/

# The missing sdkplugin.properties will regenerate below files
resources/customlibs/jsSrc/android/com/konylabs/ffi/N_KonyLogger.java
resources/customlibs/jsSrc/tabrcandroid/com/konylabs/ffi/N_KonyLogger.java
resources/customlibs/jsSrc/kiosk/KonyLogger.js
resources/customlibs/jsSrc/kiosk/KonyLogger.xml
resources/customlibs/jsSrc/windows8/KonyLogger.js
resources/customlibs/jsSrc/windows8/KonyLogger.xml
resources/customlibs/jsSrc/winmobile/KonyLogger.js
resources/customlibs/jsSrc/winmobile/KonyLogger.xml
resources/customlibs/jsSrc/winphone8/KonyLogger.js
resources/customlibs/jsSrc/winphone8/KonyLogger.xml
resources/customlibs/jsSrc/winphone81s/KonyLogger.js
resources/customlibs/jsSrc/winphone81s/KonyLogger.xml
resources/customlibs/jsXml/KonyLogger.js
resources/customlibs/jsXml/KonyLogger.xml
resources/customlibs/jsSrc/kiosk/SSOFFI.js
resources/customlibs/jsSrc/kiosk/SSOFFI.xml
resources/customlibs/jsSrc/windows8/SSOFFI.js
resources/customlibs/jsSrc/windows8/SSOFFI.xml
resources/customlibs/jsSrc/winmobile/SSOFFI.js
resources/customlibs/jsSrc/winmobile/SSOFFI.xml
resources/customlibs/jsSrc/winphone8/SSOFFI.js
resources/customlibs/jsSrc/winphone8/SSOFFI.xml
resources/customlibs/jsSrc/winphone81s/SSOFFI.js
resources/customlibs/jsSrc/winphone81s/SSOFFI.xml
resources/customlibs/jsXml/SSOFFI.js
resources/customlibs/jsXml/SSOFFI.xml
resources/customlibs/jsSrc/android/com/konylabs/ffi/ND_binary_util.java
resources/customlibs/jsSrc/android/com/konylabs/ffi/N_binarydata.java
resources/customlibs/jsSrc/tabrcandroid/com/konylabs/ffi/ND_binary_util.java
resources/customlibs/jsSrc/tabrcandroid/com/konylabs/ffi/N_binarydata.java
resources/customlibs/jsXml/binary.util.js
resources/customlibs/jsXml/binary.util.xml
resources/customlibs/jsXml/binarydata.js
resources/customlibs/jsXml/binarydata.xml

# Visualizer headless build configuration files
HeadlessBuild.properties
HeadlessBuild-Global.properties

# Out-of-the-box NFI bindings for Sync
/nativeapi.json
/nativebindings/Android/*/Kony_SyncV2-Android-*.zip
/nativebindings/Android/*/Kony_SyncV2-Android-*/tern.json
/nativebindings/iOS/*/Kony_SyncV2-iOS-*.zip
/nativebindings/iOS/*/Kony_SyncV2-iOS-*/tern.json

# Auxiliary files generated during a build to expose the widget ID's for testing.
resources/mobile/native/android/values/widgetids.xml
resources/tablet/native/androidtab/values/widgetids.xml

# NPM dependencies folder which gets created for apps using the "Nitro" Cordova integration
# when you choose NOT to use a globally installed Cordova SDK by unchecking
# `Project Settings>Application>Cordova Settings>Use globally installed Cordova version`.
node_modules

# When using the "Nitro" Cordova integration, the Cordova `plugins` and `platforms`
# directories can be ignored as with any Cordova project.
cordovatemp
web/cordova/plugins
web/cordova/platforms

# Auto-generated temporary internationalization files.
resources/i18n/

# Logs created by building from the command line.
velocity.log

# A Logger FFI that gets bundled with each project and is auto-generated by Visualizer with each build.

# A Single Sign-On FFI that gets bundled with each project and is auto-generated by Visualizer with each build.

# A utility FFI that gets bundled with each project and is auto-generated by Visualizer with each build.

# Auto-generated project setting files. Generated the first time you save project settings, even if no changes were made.
/_clouddata/
/appSettings.xml
/context.properties
/defaults/
/projectsplash.xml
/windowsViews.xml

### Python ###
# Byte-compiled / optimized / DLL files

# C extensions

# Distribution / packaging

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.

# Installer logs

# Unit test / coverage reports

# Translations

# Django stuff:

# Flask stuff:

# Scrapy stuff:

# Sphinx documentation

# PyBuilder

# Jupyter Notebook

# IPython

# pyenv

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.

# PEP 582; used by e.g. github.com/David-OConnor/pyflow

# Celery stuff

# SageMath parsed files

# Environments

# Spyder project settings

# Rope project settings

# mkdocs documentation

# mypy

# Pyre type checker

# pytype static type analyzer

### XamarinStudio ###
bin/
obj/
*.userprefs
.packages

### VisualStudio ###
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.iobj
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*[.json, .xml, .info]

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# End of https://www.toptal.com/developers/gitignore/api/xamarinstudio,visualstudio,konyvisualizer,c++,java,flask,python